#!/usr/bin/env python
from __future__ import division
from __future__ import print_function
import sys

import core


def usage():
    print("%s add-group <name> <keyword>" % sys.argv[0])
    print("%s list-groups" % sys.argv[0])
    print("%s list-members <group>" % sys.argv[0])
    print("%s add-member <number> <alias> <group>" % sys.argv[0])
    print("%s change-number <number> <new_number> <group>" % sys.argv[0])
    print("%s rm-member <number> <group|ALL>" % sys.argv[0])
    print("%s set-sender <number> <group>" % sys.argv[0])
    print("%s set-admin <number> <group>" % sys.argv[0])
    print("%s fake-incoming <src> <phone> <msg>" % sys.argv[0])
    print("%s add-webadmin <login> <password>" % sys.argv[0])
    print("%s dump-groups" % sys.argv[0])
    sys.exit(1)


argv = []
for a in sys.argv:
    argv.append(a.decode(sys.getfilesystemencoding()))

if len(argv) < 2:
    usage()

data = core.Data()

if argv[1] == u'add-group':
    if len(argv) != 4:
        usage()
    data.add_group(argv[2], argv[3])
elif argv[1] == u'list-groups':
    for g in data.get_groups():
        print(g['name'])
elif argv[1] == u'list-members':
    if len(argv) != 3:
        usage()
    gid = data.get_group_id(argv[2])
    if not gid:
        print(u"no such group!")
        sys.exit(1)
    for member in data.get_group_members(gid):
        if member['sender']:
            s = u's'
        else:
            s = u' '
        if member['admin']:
            s = u'a' + s
        else:
            s = u' ' + s
        s += u' %s [%s]' % (member['alias'], member['number'])
        print(s)
elif argv[1] == u'add-member':
    if len(argv) != 5:
        usage()
    number, alias, group = argv[2:]
    number = core.normalize_number(number)
    if not number:
        print(u"number error!")
        sys.exit(1)
    group_id = data.get_group_id(group)
    if not group_id:
        print(u"group error!")
        sys.exit(1)
    mid = data.add_number(number, alias, group_id)
    if mid == None:
        print(u"error: alias already exists")
elif argv[1] == u'change-number':
    if len(argv) != 5:
        usage()
    number, new_number, group = argv[2:]
    number = core.normalize_number(number)
    new_number = core.normalize_number(new_number)

    if not number or not new_number:
        print(u"number error!")
        sys.exit(1)
    group_id = data.get_group_id(group)
    if not group_id:
        print(u"group error!")
        sys.exit(1)
    mid = data.change_number(number, new_number, group_id=group_id)
    if mid == None:
        print(u"error: unable to change number")
elif argv[1] == u'rm-member':
    if len(argv) != 4:
        usage()
    number, group = argv[2:]
    number = core.normalize_number(number)
    if not number:
        print(u"number error!")
        sys.exit(1)
    if group == u"ALL":
        for g in data.get_groups(number=number):
            data.remove_number(number=number, group_id=g['id'])
    else:
        # one number
        group_id = data.get_group_id(group)
        if not group_id:
            print(u"group error!")
            sys.exit(1)
        mid = data.remove_number(number=number, group_id=group_id)
elif argv[1] == u'set-sender':
    if len(argv) != 4:
        usage()

    number, group = argv[2:]
    number = core.normalize_number(number)
    group_id = data.get_group_id(group)
    if not group_id:
        print(u"group error!")
        sys.exit(1)
    mid = data.get_member_id(number, group_id)
    if not mid:
        print(u"no such number!")
        sys.exit(1)
    data.set_member_info(mid, sender=True)
elif argv[1] == u'set-admin':
    if len(argv) != 4:
        usage()

    number, group = argv[2:]
    number = core.normalize_number(number)
    group_id = data.get_group_id(group)
    if not group_id:
        print(u"group error!")
        sys.exit(1)
    mid = data.get_member_id(number, group_id)
    if not mid:
        print(u"no such number!")
        sys.exit(1)
    data.set_member_info(mid, sender=True, admin=True)
elif argv[1] == u'fake-incoming':
    if len(argv) != 5:
        usage()
    src, phone, msg = argv[2:]
    src = core.normalize_number(src)
    if not src:
        print("number error!")
        sys.exit(1)
    data.fake_incoming(src, phone, msg)
elif argv[1] == u'add-webadmin':
    if len(argv) != 4:
        usage()
    login, password = argv[2:]
    data.add_webuser(login, password, 2)
elif argv[1] == u'dump-groups':
    if len(argv) != 2:
        print(len(argv))
        usage()
    for g in data.get_groups():
        print(u'smskrupp add-group %s %s'%(g['name'], g['keyword']))
        for member in data.get_group_members(g['id']):
            print(u'smskrupp add-member %s %s %s'%(member['number'], member['alias'], g['name']))
            if member['sender']:
                print(u'smskrupp set-sender %s %s'%(member['number'], g['name']))
            if member['admin']:
                print(u'smskrupp set-admin %s %s'%(member['number'], g['name']))
else:
    usage()
